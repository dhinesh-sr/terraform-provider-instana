// Code generated by MockGen. DO NOT EDIT.
// Source: instana/restapi/instana-rest-resource.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	restapi "github.com/gessnerfl/terraform-provider-instana/instana/restapi"
	gomock "go.uber.org/mock/gomock"
)

// MockInstanaDataObject is a mock of InstanaDataObject interface.
type MockInstanaDataObject struct {
	ctrl     *gomock.Controller
	recorder *MockInstanaDataObjectMockRecorder
}

// MockInstanaDataObjectMockRecorder is the mock recorder for MockInstanaDataObject.
type MockInstanaDataObjectMockRecorder struct {
	mock *MockInstanaDataObject
}

// NewMockInstanaDataObject creates a new mock instance.
func NewMockInstanaDataObject(ctrl *gomock.Controller) *MockInstanaDataObject {
	mock := &MockInstanaDataObject{ctrl: ctrl}
	mock.recorder = &MockInstanaDataObjectMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstanaDataObject) EXPECT() *MockInstanaDataObjectMockRecorder {
	return m.recorder
}

// GetIDForResourcePath mocks base method.
func (m *MockInstanaDataObject) GetIDForResourcePath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIDForResourcePath")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetIDForResourcePath indicates an expected call of GetIDForResourcePath.
func (mr *MockInstanaDataObjectMockRecorder) GetIDForResourcePath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIDForResourcePath", reflect.TypeOf((*MockInstanaDataObject)(nil).GetIDForResourcePath))
}

// MockRestResource is a mock of RestResource interface.
type MockRestResource[T restapi.InstanaDataObject] struct {
	ctrl     *gomock.Controller
	recorder *MockRestResourceMockRecorder[T]
}

// MockRestResourceMockRecorder is the mock recorder for MockRestResource.
type MockRestResourceMockRecorder[T restapi.InstanaDataObject] struct {
	mock *MockRestResource[T]
}

// NewMockRestResource creates a new mock instance.
func NewMockRestResource[T restapi.InstanaDataObject](ctrl *gomock.Controller) *MockRestResource[T] {
	mock := &MockRestResource[T]{ctrl: ctrl}
	mock.recorder = &MockRestResourceMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRestResource[T]) EXPECT() *MockRestResourceMockRecorder[T] {
	return m.recorder
}

// Create mocks base method.
func (m *MockRestResource[T]) Create(data T) (T, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", data)
	ret0, _ := ret[0].(T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRestResourceMockRecorder[T]) Create(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRestResource[T])(nil).Create), data)
}

// Delete mocks base method.
func (m *MockRestResource[T]) Delete(data T) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRestResourceMockRecorder[T]) Delete(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRestResource[T])(nil).Delete), data)
}

// DeleteByID mocks base method.
func (m *MockRestResource[T]) DeleteByID(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockRestResourceMockRecorder[T]) DeleteByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockRestResource[T])(nil).DeleteByID), id)
}

// GetAll mocks base method.
func (m *MockRestResource[T]) GetAll() (*[]T, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].(*[]T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockRestResourceMockRecorder[T]) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockRestResource[T])(nil).GetAll))
}

// GetOne mocks base method.
func (m *MockRestResource[T]) GetOne(id string) (T, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOne", id)
	ret0, _ := ret[0].(T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOne indicates an expected call of GetOne.
func (mr *MockRestResourceMockRecorder[T]) GetOne(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOne", reflect.TypeOf((*MockRestResource[T])(nil).GetOne), id)
}

// Update mocks base method.
func (m *MockRestResource[T]) Update(data T) (T, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", data)
	ret0, _ := ret[0].(T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockRestResourceMockRecorder[T]) Update(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRestResource[T])(nil).Update), data)
}

// MockReadOnlyRestResource is a mock of ReadOnlyRestResource interface.
type MockReadOnlyRestResource[T restapi.InstanaDataObject] struct {
	ctrl     *gomock.Controller
	recorder *MockReadOnlyRestResourceMockRecorder[T]
}

// MockReadOnlyRestResourceMockRecorder is the mock recorder for MockReadOnlyRestResource.
type MockReadOnlyRestResourceMockRecorder[T restapi.InstanaDataObject] struct {
	mock *MockReadOnlyRestResource[T]
}

// NewMockReadOnlyRestResource creates a new mock instance.
func NewMockReadOnlyRestResource[T restapi.InstanaDataObject](ctrl *gomock.Controller) *MockReadOnlyRestResource[T] {
	mock := &MockReadOnlyRestResource[T]{ctrl: ctrl}
	mock.recorder = &MockReadOnlyRestResourceMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReadOnlyRestResource[T]) EXPECT() *MockReadOnlyRestResourceMockRecorder[T] {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockReadOnlyRestResource[T]) GetAll() (*[]T, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].(*[]T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockReadOnlyRestResourceMockRecorder[T]) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockReadOnlyRestResource[T])(nil).GetAll))
}

// GetByQuery mocks base method.
func (m *MockReadOnlyRestResource[T]) GetByQuery(queryParams map[string]string) (*[]T, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByQuery", queryParams)
	ret0, _ := ret[0].(*[]T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByQuery indicates an expected call of GetAll.
func (mr *MockReadOnlyRestResourceMockRecorder[T]) GetByQuery(queryParams map[string]string) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByQuery", reflect.TypeOf((*MockReadOnlyRestResource[T])(nil).GetByQuery), queryParams)
}

// GetOne mocks base method.
func (m *MockReadOnlyRestResource[T]) GetOne(id string) (T, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOne", id)
	ret0, _ := ret[0].(T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOne indicates an expected call of GetOne.
func (mr *MockReadOnlyRestResourceMockRecorder[T]) GetOne(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOne", reflect.TypeOf((*MockReadOnlyRestResource[T])(nil).GetOne), id)
}

// MockJSONUnmarshaller is a mock of JSONUnmarshaller interface.
type MockJSONUnmarshaller[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockJSONUnmarshallerMockRecorder[T]
}

// MockJSONUnmarshallerMockRecorder is the mock recorder for MockJSONUnmarshaller.
type MockJSONUnmarshallerMockRecorder[T any] struct {
	mock *MockJSONUnmarshaller[T]
}

// NewMockJSONUnmarshaller creates a new mock instance.
func NewMockJSONUnmarshaller[T any](ctrl *gomock.Controller) *MockJSONUnmarshaller[T] {
	mock := &MockJSONUnmarshaller[T]{ctrl: ctrl}
	mock.recorder = &MockJSONUnmarshallerMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJSONUnmarshaller[T]) EXPECT() *MockJSONUnmarshallerMockRecorder[T] {
	return m.recorder
}

// Unmarshal mocks base method.
func (m *MockJSONUnmarshaller[T]) Unmarshal(data []byte) (T, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unmarshal", data)
	ret0, _ := ret[0].(T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unmarshal indicates an expected call of Unmarshal.
func (mr *MockJSONUnmarshallerMockRecorder[T]) Unmarshal(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unmarshal", reflect.TypeOf((*MockJSONUnmarshaller[T])(nil).Unmarshal), data)
}

// UnmarshalArray mocks base method.
func (m *MockJSONUnmarshaller[T]) UnmarshalArray(data []byte) (*[]T, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnmarshalArray", data)
	ret0, _ := ret[0].(*[]T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnmarshalArray indicates an expected call of UnmarshalArray.
func (mr *MockJSONUnmarshallerMockRecorder[T]) UnmarshalArray(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmarshalArray", reflect.TypeOf((*MockJSONUnmarshaller[T])(nil).UnmarshalArray), data)
}
